#include "hash_table.hpp"
#include "bloomfilter.hpp"
#include "task_manager.hpp"


void set_uniform_distributed_values(int32_t *column, size_t range_size) {
    //thread_local allows unique seed for each thread
    thread_local std::random_device rd;     // Will be used to obtain a seed for the random number engine
    thread_local std::mt19937 engine(rd()); //Standard mersenne_twister_engine seeded with rd()

    std::uniform_int_distribution<int32_t> distribution;
    auto sampler = [&]() { return distribution(engine); };              //Use distribution to transform the random unsigned int generated by engine into an int in [0, u32]
    std::generate(&column[0], column + range_size, sampler); // Initializes the container with random uniform distributed values
}
void populate_table(Table &table) {
    for(auto &column : table.columns)
        set_uniform_distributed_values(column, table.size());
}

int main() {
    TaskManager manager;
	Table table_build(1,100);
	Table table_probe(1,100);
    populate_table(table_build);
    populate_table(table_probe);
    //build table
    table_build.chunk([&] (auto columns, auto num_columns, auto offset, auto num) {
		int32_t* tkeys = (int32_t*)columns[0];
		Vectorized::chunk(offset, num, [&] (auto offset, auto num) {
            auto keys = &tkeys[offset];
            Vectorized::map_hash(hashs, keys, sel, num);
	        ht->Insert(keys, hashs, sel, num);
		}, vsize);
	}, [&] () {
		// finished
		ht->FinalizeBuild();
    });
    //execute probe
    manager.executeQuery(table_probe);
    
    return 0;
}